// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

//  mysql data base 
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  email             String              @unique @db.VarChar(50)
  name              String              @db.VarChar(50)
  password          String
  role              users_role?
  address           String?             @db.VarChar(500)
  photo             String
  phone             Int?
  gender            String
  discord           String?
  term              Boolean
  verifiedCode      Int?
  createdAt         DateTime            @default(now()) @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamp(0)
  student_feedbacks student_feedbacks[]
  enrollment        enrollment[]
  payment           payment[]
}

model courses {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  description        String               @db.Text
  photo_url          String
  video_url          String
  price              Int
  discount           Float?
  createdAt          DateTime             @default(now()) @db.Timestamp(0)
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamp(0)
  inside_this_course inside_this_course[]
  facilities         facilities[]
  learning_purposes  learning_purposes[]
  prerequisites      prerequisites[]
  student_feedbacks  student_feedbacks[]
  mentors            mentors[]
  course_faqs        course_faqs[]
  learning_objects   learning_objects[]
  batch              batch[]
  payment            payment[]
  enrollment         enrollment[]
  targetAudience     targetAudience[]
  assignmentShowcase assignmentShowcase[]
}

//  inside_this_course model 
model inside_this_course {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(400)
  course_id Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

//  learning_objects model 
model learning_objects {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(400)
  course_id Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

//  facilities 
model facilities {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(400)
  course_id Int
  courses   courses  @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

//  facilities 
model targetAudience {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(400)
  course_id Int
  courses   courses  @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

//  learning_purposes 
model learning_purposes {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(400)
  course_id Int
  courses   courses  @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

//  prerequisites 
model prerequisites {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(400)
  course_id Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model assignmentShowcase {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(400)
  photo     String  @db.VarChar(500)
  course_id Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

//  student_feedbacks 
model student_feedbacks {
  id          Int     @id @default(autoincrement())
  description String  @db.Text
  course_id   Int
  student_id  Int
  courses     courses @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  users       users   @relation(fields: [student_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([course_id, student_id])
}

//  mentors model 
model mentors {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(400)
  photo       String
  about       String  @db.VarChar(300)
  description String  @db.Text
  education   String? @db.VarChar(250)
  phone       String? @db.VarChar(50)
  email       String? @db.VarChar(50)

  course_id Int
  courses   courses @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model course_faqs {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  title       String
  course_id   Int
  courses     courses  @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

//  batch schema 
model batch {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(50)
  startDate   DateTime
  endDate     DateTime
  course_id   Int
  status      batch_status @default(running)
  createdAt   DateTime     @default(now()) @db.Timestamp(0)
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  course      courses      @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  enrollments enrollment[]
  payment     payment[]
}

model payment {
  id             Int          @id @default(autoincrement())
  user_id        Int
  course_id      Int
  batch_id       Int
  amount         Float
  transaction_id String
  method_name    String
  status         String       @default("pending")
  users          users        @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  course         courses      @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  batch          batch        @relation(fields: [batch_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt      DateTime     @default(now()) @db.Timestamp(0)
  updatedAt      DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  enrollment     enrollment[]
}

model enrollment {
  id         Int      @id @default(autoincrement())
  batch_id   Int
  user_id    Int
  course_id  Int
  payment_id Int
  batch      batch    @relation(fields: [batch_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  payment    payment  @relation(fields: [payment_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user       users    @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  course     courses  @relation(fields: [course_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt  DateTime @default(now()) @db.Timestamp(0)
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp(0)
}

// enum models 
enum users_role {
  student
  admin
  mentors
}

enum batch_status {
  running
  ending
  completed
}
